- stage: Deploy_Prod
  displayName: Deploy to Prod
  dependsOn: Build
  jobs:
    - deployment: DeployProd
      pool:
        vmImage: 'ubuntu-latest'
      environment: 'prod'
      strategy:
        runOnce:
          deploy:
            steps:
              - download: current
                artifact: drop
              # Fetch secrets from Azure Key Vault
              - task: AzureKeyVault@2
                displayName: 'Fetch secrets from Azure Key Vault'
                inputs:
                  connectedServiceName: 'YourAzureServiceConnection'
                  keyVaultName: 'your-keyvault-prod'
                  secretsFilter: 'AZURE_AD_CLIENT_ID,AZURE_AD_CLIENT_SECRET,AZURE_AD_TENANT_ID'

              # Replace tokens in Helm chart template files (e.g., secret.yaml)
              - task: ReplaceToken@6
                displayName: 'Replace tokens in Helm secret template'
                inputs:
                  targetFiles: 'helm/nextjs-app/templates/secret.yaml'
                  encoding: 'auto'
                  actionOnMissing: 'warn'
                  keepToken: false

              # Install Helm (if not already installed)
              - task: HelmInstaller@1
                displayName: 'Install Helm'
                inputs:
                  helmVersionToInstall: 'latest'

              # Deploy the Helm chart to AKS
              - task: HelmDeploy@0
                displayName: 'Deploy Helm Chart to AKS'
                inputs:
                  connectionType: 'Azure Resource Manager'
                  azureSubscription: 'YourAzureServiceConnection'
                  azureResourceGroup: 'your-aks-resource-group'
                  kubernetesCluster: 'your-aks-cluster-name'
                  namespace: 'default'
                  command: 'upgrade'
                  chartType: 'FilePath'
                  chartPath: 'helm/nextjs-app'
                  releaseName: 'nextjs-app-prod'
                  install: true
                  overrideValues: |
                    image.repository=$(dockerRegistry)/$(imageRepository)
                    image.tag=$(buildId)
                    service.targetPort=$(containerPort)
