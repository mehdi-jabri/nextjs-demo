trigger:
  branches:
    include:
      - main

parameters:
  - name: environment
    type: string
    default: 'dev'
    values:
      - dev
      - test
      - prod

variables:
  # Docker registry and image settings
  dockerRegistryServiceConnection: 'YourDockerRegistryServiceConnection'
  dockerRegistry: 'yourregistry.azurecr.io'
  imageRepository: 'next-auth-azure-app'
  containerPort: '3000'
  buildId: $(Build.BuildId)
  # Environment-specific variables (adjust as needed)
  keyVaultName: 'your-keyvault-$(parameters.environment)'
  appName: 'your-app-name-$(parameters.environment)'

stages:
  - stage: Build
    displayName: Build Stage
    jobs:
      - job: Build
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'
            displayName: 'Install Node.js'
          - script: |
              npm install -g pnpm
              pnpm install
              pnpm run build
            displayName: 'Install dependencies and build'
          - task: Docker@2
            displayName: 'Build and Push Docker Image'
            inputs:
              containerRegistry: $(dockerRegistryServiceConnection)
              repository: $(dockerRegistry)/$(imageRepository)
              command: 'buildAndPush'
              Dockerfile: 'Dockerfile'
              tags: |
                $(buildId)
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)'
              artifact: 'drop'

  - stage: Deploy
    displayName: Deploy to $(parameters.environment)
    dependsOn: Build
    jobs:
      - deployment: DeployStage
        pool:
          vmImage: 'ubuntu-latest'
        environment: '$(parameters.environment)'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop
                - task: AzureKeyVault@2
                  inputs:
                    connectedServiceName: 'YourAzureServiceConnection'
                    keyVaultName: $(keyVaultName)
                    secretsFilter: 'AZURE_AD_CLIENT_ID,AZURE_AD_CLIENT_SECRET,AZURE_AD_TENANT_ID'
                - task: ReplaceToken@6
                  inputs:
                    targetFiles: '**/*.env.production'
                    encoding: 'auto'
                    actionOnMissing: 'warn'
                    keepToken: false
                - task: AzureWebAppContainer@1
                  inputs:
                    azureSubscription: 'YourAzureServiceConnection'
                    appName: $(appName)
                    containers: '$(dockerRegistry)/$(imageRepository):$(buildId)'
                    containerPort: $(containerPort)
